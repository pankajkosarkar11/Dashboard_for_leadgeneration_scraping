
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

# Set the page layout configuration as the first Streamlit command
st.set_page_config(layout="wide")

# Dictionary to map full state names to their abbreviations
US_STATES_ABBR = {
    'Alabama': 'AL', 'Alaska': 'AK', 'Arizona': 'AZ', 'Arkansas': 'AR', 'California': 'CA',
    'Colorado': 'CO', 'Connecticut': 'CT', 'Delaware': 'DE', 'District of Columbia': 'DC',
    'Florida': 'FL', 'Georgia': 'GA', 'Hawaii': 'HI', 'Idaho': 'ID', 'Illinois': 'IL',
    'Indiana': 'IN', 'Iowa': 'IA', 'Kansas': 'KS', 'Kentucky': 'KY', 'Louisiana': 'LA',
    'Maine': 'ME', 'Maryland': 'MD', 'Massachusetts': 'MA', 'Michigan': 'MI', 'Minnesota': 'MN',
    'Mississippi': 'MS', 'Missouri': 'MO', 'Montana': 'MT', 'Nebraska': 'NE', 'Nevada': 'NV',
    'New Hampshire': 'NH', 'New Jersey': 'NJ', 'New Mexico': 'NM', 'New York': 'NY',
    'North Carolina': 'NC', 'North Dakota': 'ND', 'Ohio': 'OH', 'Oklahoma': 'OK', 'Oregon': 'OR',
    'Pennsylvania': 'PA', 'Rhode Island': 'RI', 'South Carolina': 'SC', 'South Dakota': 'SD',
    'Tennessee': 'TN', 'Texas': 'TX', 'Utah': 'UT', 'Vermont': 'VT', 'Virginia': 'VA',
    'Washington': 'WA', 'West Virginia': 'WV', 'Wisconsin': 'WI', 'Wyoming': 'WY'
}

# Load data
df = pd.read_excel(r"C:\Users\pankaj.kosarkar\Project_work\Streamlit_app_leadgeneration\masterexcel 1.xlsx")

# Standardize state names
df['State'] = df['State'].replace(US_STATES_ABBR)

# Remove the time from the date of job posted
df['Date of job posted'] = pd.to_datetime(df['Date of job posted'], format='%d-%m-%Y').dt.date
df['Date of Extraction'] = pd.to_datetime(df['Date of Extraction'], format='%d-%m-%Y').dt.date

# Move filters to the top
st.sidebar.header("Filters")
start_date = st.sidebar.date_input("Start date", df['Date of job posted'].min())
end_date = st.sidebar.date_input("End date", df['Date of job posted'].max())
business_types = st.sidebar.multiselect('Select Business Type(s)', df['Business Type'].unique(), default=df['Business Type'].unique())

# Apply date and business type filters
filtered_df = df[(df['Date of job posted'] >= start_date) & (df['Date of job posted'] <= end_date)]
filtered_df = filtered_df[filtered_df['Business Type'].isin(business_types)]

# Quick numbers for reference
st.title("Sales Lead Generation Dashboard")

# Calculate the total, relevant, and irrelevant leads
total_leads = len(filtered_df)
total_relevant = len(filtered_df[filtered_df['NOTE'] == 'Relevant'])
total_irrelevant = len(filtered_df[filtered_df['NOTE'] == 'Irrelevant'])

# Calculate the business-wise split
business_counts = filtered_df['Business Type'].value_counts()

# Display the numbers horizontally
st.subheader("Quick Reference")
st.markdown(f"<h2 style='text-align: center;'>Total Leads: {total_leads} | Relevant: {total_relevant} | Irrelevant: {total_irrelevant}</h2>", unsafe_allow_html=True)

# Display the business-wise split in a horizontal manner
business_split_text = " | ".join([f"{business}: {count}" for business, count in business_counts.items()])
st.markdown(f"<h3 style='text-align: center;'>{business_split_text}</h3>", unsafe_allow_html=True)

# Create two-column layout for better readability
col1, col2 = st.columns(2)

# Map Visualization
with col1:
    st.subheader("Leads Generated by State")
    state_data = filtered_df['State'].value_counts().reset_index()
    state_data.columns = ['State', 'Leads']
    if not state_data.empty:
        try:
            fig_state = px.choropleth(state_data, locations='State', locationmode="USA-states", color='Leads',
                                      scope="usa", title="Leads Generated by State", width=800, height=600)
            fig_state.update_layout(legend_title_text='Leads', legend=dict(font=dict(size=14)))
            st.plotly_chart(fig_state)
        except Exception as e:
            st.error(f"Error generating state-wise map: {e}")
    else:
        st.write("No data available for the selected filters.")

# Business-wise Leads Over Time (combined graph)
with col2:
    st.subheader("Leads Over Time by Business Type")
    time_data = filtered_df.groupby(['Date of job posted', 'Business Type']).size().reset_index(name='Leads')
    fig_time = px.line(time_data, x='Date of job posted', y='Leads', color='Business Type',
                       title="Lead Generation Over Time by Business Type", width=800, height=600)
    fig_time.update_layout(legend_title_text='Business Type', legend=dict(font=dict(size=14)))
    st.plotly_chart(fig_time)

# Leads Generated by Job Portal
with col1:
    st.subheader("Leads Generated by Job Portal")
    portal_data = filtered_df['Portal'].value_counts(normalize=True).reset_index()
    portal_data.columns = ['Portal', 'Percentage']
    portal_data['Portal'] = portal_data.apply(lambda x: 'Others' if x['Percentage'] < 0.01 else x['Portal'], axis=1)
    portal_data = portal_data.groupby('Portal').sum().reset_index()
    fig_portal = px.pie(portal_data, values='Percentage', names='Portal', title="Leads by Job Portal (with Others grouped)", width=800, height=600)
    fig_portal.update_traces(textinfo='percent+label', pull=[0.1 if p == 'Others' else 0 for p in portal_data['Portal']])
    fig_portal.update_layout(legend_title_text='Job Portal', legend=dict(font=dict(size=14)))
    st.plotly_chart(fig_portal)

# Relevant vs Irrelevant Leads
with col2:
    st.subheader("Relevant vs Irrelevant Leads")
    relevant_data = filtered_df['NOTE'].value_counts().reset_index()
    relevant_data.columns = ['Lead Type', 'Count']
    fig_relevant = px.pie(relevant_data, values='Count', names='Lead Type', title="Relevant vs Irrelevant Leads", width=800, height=600)
    fig_relevant.update_traces(textinfo='percent+label')
    fig_relevant.update_layout(legend_title_text='Lead Type', legend=dict(font=dict(size=14)))
    st.plotly_chart(fig_relevant)
